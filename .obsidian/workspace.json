{
  "main": {
    "id": "5819472f613983a0",
    "type": "split",
    "children": [
      {
        "id": "91defe902a76403d",
        "type": "tabs",
        "children": [
          {
            "id": "f47b8a8e2d57a1e6",
            "type": "leaf",
            "pinned": true,
            "state": {
              "type": "markdown",
              "state": {
                "file": "custom/tags.md",
                "mode": "source",
                "source": false
              },
              "pinned": true
            }
          },
          {
            "id": "eec838cb6e644259",
            "type": "leaf",
            "pinned": true,
            "state": {
              "type": "markdown",
              "state": {
                "file": "Blocks/JS Core/Блок 3. Обработка ошибок и асинхронность.md",
                "mode": "source",
                "source": false
              },
              "pinned": true
            }
          },
          {
            "id": "6bd99050b7f7236d",
            "type": "leaf",
            "pinned": true,
            "state": {
              "type": "markdown",
              "state": {
                "file": "Blocks/JS Core/Блок 4. Browser API + HTTP.md",
                "mode": "source",
                "source": false
              },
              "pinned": true
            }
          },
          {
            "id": "e52724e5784ed08b",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "props/JS/event & bubbling.md",
                "mode": "source",
                "source": false
              }
            }
          }
        ],
        "currentTab": 3
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "8e12ece19c98dd56",
    "type": "split",
    "children": [
      {
        "id": "32d0cd926d69b17e",
        "type": "tabs",
        "children": [
          {
            "id": "681b0b7134b7e1e2",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "24222cd9115d84c3",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "\"    targetElement.insertAdjacentHTML(position, text);Вставляет указанный HTML в DOM дерево в указанную позицию. Данная функция не переписывает имеющиеся элементы, что предотвращает дополнительную сериализацию и поэтому работает быстрее, чем манипуляции с innerHTML.    const textToAdd = event.target.elements.text.value;    const div = document.getElementById(\\\"main\");    div.insertAdjacentHTML(\"beforeend\", `<p>${textToAdd}</p>`);\"",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": true,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "754f979dad06d9d7",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 200
  },
  "right": {
    "id": "1e863ce63703f94b",
    "type": "split",
    "children": [
      {
        "id": "c0662bf1bfa001a4",
        "type": "tabs",
        "children": [
          {
            "id": "d2bb19b5502e40bb",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "props/JS/event & bubbling.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "8d306de7cb1e4b56",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "props/JS/event & bubbling.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "2eaf26749d76b81a",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true
              }
            }
          },
          {
            "id": "dbee1c3ad334e268",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "props/JS/event & bubbling.md"
              }
            }
          },
          {
            "id": "bf14ddb8a211206d",
            "type": "leaf",
            "state": {
              "type": "advanced-tables-toolbar",
              "state": {}
            }
          },
          {
            "id": "535c012e2dcf6845",
            "type": "leaf",
            "state": {
              "type": "git-history-view",
              "state": {}
            }
          },
          {
            "id": "3de3e5b9026d67ec",
            "type": "leaf",
            "state": {
              "type": "all-properties",
              "state": {
                "sortOrder": "frequency"
              }
            }
          }
        ],
        "currentTab": 3
      }
    ],
    "direction": "horizontal",
    "width": 200
  },
  "left-ribbon": {
    "hiddenItems": {
      "switcher:Меню быстрого перехода": false,
      "graph:Граф": false,
      "canvas:Создать новый холст": false,
      "templates:Вставить шаблон": false,
      "command-palette:Открыть палитру команд": false,
      "open-vscode:VSCode": false
    }
  },
  "active": "e52724e5784ed08b",
  "lastOpenFiles": [
    "assets/Pasted image 20231103215414.png",
    "assets/Pasted image 20231103215221.png",
    "assets/Pasted image 20231103215022.png",
    "Blocks/JS Core/Блок 4. Browser API + HTTP.md",
    "props/JS/event & bubbling.md",
    "Blocks/JS Core/Блок 3. Обработка ошибок и асинхронность.md",
    "custom/tags.md",
    "assets/Pasted image 20231103212708.png",
    "props/JS/_.matches().md",
    "props/JS/_.addEventListener().md",
    "props/JS/_.createDocumentFragment().md",
    "props/JS/_.insertAdjacentElement().md",
    "props/JS/_.appendChild().md",
    "props/JS/_.getAttribute().md",
    "props/JS/data-атрибут.md",
    "props/JS/data- & dataset.md",
    "props/JS/console._().md",
    "props/JS/_.children.md",
    "assets/Pasted image 20231103152403.png",
    "assets/Pasted image 20231103152334.png",
    "assets/Pasted image 20231103151316.png",
    "assets/Pasted image 20231103151216.png",
    "assets/Pasted image 20231103145025.png",
    "assets/Pasted image 20231103144958.png",
    "props/JS/_.querySelector().md",
    "props/JS/decorator.md",
    "props/JS/this.md",
    "props/JS/trottle & debounce.md",
    "assets/Pasted image 20231102105840.png",
    "props/JS/callback.md",
    "props/JS/promises.md",
    "props/JS/callbac.md",
    "props/JS/localStorage.md",
    "Blocks/JS Core/Блок 1. Основные концепции.md",
    "Blocks/JS Core/Блок 2. Прототипы и классы.md",
    "props/JS/Map() Set().md",
    "Blocks/JS Core/Блок 3. Обработка ошибок и асинхронность",
    "getters",
    "Blocks/JS Core",
    "Blocks/Web Core",
    "custom/bugs",
    "custom/Tags.txt",
    "props/Style",
    "scripts",
    "props/JS",
    "props/Web"
  ]
}